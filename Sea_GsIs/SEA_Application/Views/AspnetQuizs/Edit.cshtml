@model SEA_Application.Models.AspnetQuiz

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_TeacherDashboardLayout.cshtml";
}

<script>
    $(document).ready(function () {
        $("#btnCancel").click(function () {

            window.location.href = "/AspnetQuestions/ViewQuestionAndQuiz";
        })

        $("#PageHeader").html("Edit Quiz");

        $("#BreadCrumbs").append(' <li> <a  href="/Teacher/Index"> Home </a> <span>&gt;</span></li>');
        $("#BreadCrumbs").append(' <li> <a href="/AspnetQuestions/ViewQuestionAndQuiz">Question & Quiz </a> <span>&gt;</span></li>');
        $("#BreadCrumbs").append(' <li class="active"><a id="BreadCrumps1" href="#">Edit</a></li>');

        var course = 'CSS';


        $('#BranchId').change(function () {

            var BranchId = $(this).val();

            if (BranchId != "") {


                $.ajax({
                    type: "POST",
                    cache: false,
                    url: "/AspNetProject/ClassesByBranch?BranchId=" + BranchId,
                    processData: false,
                    contentType: false,
                    success: function (data) {
                        var sch = JSON.parse(data);
                        console.log(sch);
                        var $el = $("#ClassId");
                        $el.empty();
                        var $e2 = $("#SubId");
                        $e2.empty();
                        var $e3 = $("#TopicId");
                        $e3.empty();
                        var $e4 = $("#SectionId");
                        $e4.empty();
                        var $e10 = $("#QuestionID");
                        $e10.empty();

                        if (sch.length > 0) {
                            $el.append($("<option></option>")
                                .attr("value", "").text('Select Class'));
                            for (i = 0; i < sch.length; i++) {

                                $el.append($("<option></option>")
                                    .attr("value", sch[i].Id).text(sch[i].Name));
                            }
                        }
                        else {
                            $el.append($("<option></option>")
                                .attr("value", '').text('Select Class'));
                        }
                    }
                });
            }
            else {
                var $el = $("#ClassId");
                $el.empty();
                var $e2 = $("#SubId");
                $e2.empty();
                var $e3 = $("#TopicId");
                $e3.empty();
                var $e4 = $("#SectionId");
                $e4.empty();

                var $e10 = $("#QuestionID");
                $e10.empty();


            }

        });


        $('#ClassId').change(function () {

            var ClassId = $(this).val();
            //Class = UserName;

            if (ClassId != "") {

                $.ajax({
                    type: "POST",
                    cache: false,
                    url: "/AspNetProject/SectionByClasses?ClassId=" + ClassId,
                    processData: false,
                    contentType: false,
                    success: function (data) {
                        var sch = JSON.parse(data);
                        console.log(sch);
                        var $el = $(".SubIdDDL");
                        $el.empty();
                        var $e3 = $("#TopicId");
                        $e3.empty();
                        var $e4 = $("#SectionId");
                        $e4.empty();

                        var $e10 = $("#QuestionID");
                        $e10.empty();

                        if (sch.length > 0) {
                            $e4.append($("<option></option>")
                                .attr("value", "").text('Select Section'));
                            for (i = 0; i < sch.length; i++) {

                                $e4.append($("<option></option>")
                                    .attr("value", sch[i].Id).text(sch[i].Name));
                            }
                        }
                        else {
                            $e4.append($("<option></option>")
                                .attr("value", '').text('Select Section'));
                        }
                    }
                });
            }

            else {

                var $el = $(".SubIdDDL");
                $el.empty();
                var $e3 = $("#TopicId");
                $e3.empty();
                var $e4 = $("#SectionId");
                $e4.empty();
                var $e10 = $("#QuestionID");
                $e10.empty();


            }

        });

        $('#SectionId').change(function () {

            var SectionId = $(this).val();
            //Class = UserName;

            if (SectionId != "") {

                $.ajax({
                    type: "POST",
                    cache: false,
                    url: "/AspNetProject/SubjectsByClass?SectionId=" + SectionId,
                    processData: false,
                    contentType: false,
                    success: function (data) {
                        var sch = JSON.parse(data);
                        console.log(sch);
                        var $el = $("#SubId");
                        $el.empty();
                        var $e3 = $("#TopicId");
                        $e3.empty();
                        $("#QuestionID").html("");

                        // var $e4 = $("#LessonId");
                        //$e4.empty();

                        if (sch.length > 0) {
                            $el.append($("<option></option>")
                                .attr("value", "").text('Select Subject'));
                            for (i = 0; i < sch.length; i++) {

                                $el.append($("<option></option>")
                                    .attr("value", sch[i].Id).text(sch[i].Name));
                            }
                        }
                        else {
                            $el.append($("<option></option>")
                                .attr("value", '').text('Select Subject'));
                        }
                    }
                });
            }

            else {

                var $el = $("#SubId");
                $el.empty();
                var $e3 = $(".TopicId");
                $e3.empty();

                $("#QuestionID").html("");
            }

        });


        $("#SubId").change(function () {

            var BranchId = $("#BranchId").val();
            var ClassId = $("#ClassId").val();
            var SubjectId = $(this).val();
            var SectionId = $("#SectionId").val();

            if (SubjectId != "") {

                $.ajax({

                    type: "POST",
                    url: "/AspNetProject/GetSubjects?BranchId=" + BranchId + "&&ClassId=" + ClassId + "&&SubjectId=" + SubjectId + "&&SectionId=" + SectionId,
                    processData: false,
                    contentType: false,
                    //data: { "SubjectId": SubjectId },
                    success: function (data) {
                        $('#TopicId').html('');
                        $('#QuestionID').html('');
                        var sch = JSON.parse(data);
                        //$.each(data, function (i, item) {

                        //    debugger
                        //    // var classname = $("#ClassID option[value='" + item.ClassID + "']").text();
                        //    $('#TopicId').append('<option value=' + item.Id + '>' + item.Name + ' </option>');

                        //});
                        var $el = $("#TopicId");
                        $el.empty();

                        if (sch.length > 0) {
                            for (i = 0; i < sch.length; i++) {

                                $el.append($("<option></option>")
                                    .attr("value", sch[i].Id).text(sch[i].Name));
                            }
                        }
                        else {
                            $el.append($("<option></option>")
                                .attr("value", '').text('Select'));
                        }

                    }


                })
            }
            else {

                var $el = $("#TopicId");
                $el.empty();

                var $e2 = $("#QuestionID");
                $e2.empty();
            }

        })


        $("#TopicId").click(function () {
            debugger
            var selectedTopic = $("#TopicId").val();

            if (selectedTopic != "")
            {

            debugger
            $.ajax({
                url: '@Url.Action("QuestionsByTopics")',
                type: 'GET',
                dataType: 'json',
                cache: false,
                traditional: true,
                data: { bdoIds: selectedTopic },

            }).done(function (response) {
                $('#QuestionID').html('');

                $.each(response, function (i, item) {

                  //  debugger
                    // var classname = $("#ClassID option[value='" + item.ClassID + "']").text();
                    $('#QuestionID').append('<option value=' + item.Id + '>' + item.Name + ' </option>');
                });
            })
            }
            else {
                $('#QuestionID').html("");
            }



        });

        $("#delete").click(function () {
            debugger;
            var QuizID = $("#QuizID").val();

            if (QuizID != "") {


                $.ajax({
                            url: "/AspnetQuizs/DeleteQuiz",
                            data: { "QuizID": QuizID },
                            success: function (data) {

                                if(data == "Success")
                                {
                                    alert("Quiz Deleted");
                                    window.location.href  ="/AspnetQuestions/ViewQuestionAndQuiz";
                                }
                                else {

                                    alert("Unalbe to Delete");
                                }


                            }
                            });

            }
            else {

            }



        });
        //$("#SubjectId").change(function () {

        //    var SubjectId = $("#SubjectId").val();

        //    if (SubjectId != "") {

        //        $.ajax({

        //            type: "POST",
        //            url: "/AspnetQuizs/GetSubjectTopics",
        //            data: { "SubjectId": SubjectId },
        //            success: function (data) {

        //                $('#TopicId').html('');

        //                $('#QuestionID').html('');
        //                $.each(data, function (i, item) {

        //                    debugger
        //                    // var classname = $("#ClassID option[value='" + item.ClassID + "']").text();
        //                    $('#TopicId').append('<option value=' + item.Id + '>' + item.Name + ' </option>');




        //                });

        //            }


        //        })

        //    }

        //    else {
        //        $('#TopicId').html('');

        //        $('#QuestionID').html('');
        //    }
        //})



    })
</script>

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body p-5">


                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

                <div class="col-md-6 pl-5 pr-5  border-color-sea">



                    <input class="form-control" type="text" id="QuizID" value="@ViewBag.QuizID" hidden />


                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)

                    <div class="form-group bmd-form-group my-3">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "bmd-label-floating" })

                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @required = true } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-group bmd-form-group my-3">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "bmd-label-floating" })

                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-group">

                        <label class="control-label">Start Date</label>


                        <input class="form-control" type="date" name="Start_Date" required value="@ViewBag.StartDate" />
                        @Html.ValidationMessageFor(model => model.Start_Date, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-group">
                        @*@Html.LabelFor(model => model.Due_Date, htmlAttributes: new { @class = "control-label" })*@

                        <label class="control-label">Due Date</label>

                        <input type="date" class="form-control" name="Due_Date" required value="@ViewBag.DueDate" />

                        @Html.ValidationMessageFor(model => model.Due_Date, "", new { @class = "text-danger" })

                    </div>


                    <div class="form-group">


                        <label class="control-label">Duration(Minutes) </label>


                        @Html.EditorFor(model => model.QuizTime, new { htmlAttributes = new { type = "number", @class = "form-control", @required = true } })
                        @Html.ValidationMessageFor(model => model.QuizTime, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-group">
                        <label class="control-label">Meeting Link </label>
                        @Html.EditorFor(model => model.MeetingLink, new { htmlAttributes = new { type = "string", @class = "form-control", } }) @*@required = true*@
                        @Html.ValidationMessageFor(model => model.MeetingLink, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-row mt-3">
                        <div class="form-group col-md-12 bmd-form-group">
                            <label for="" class="bmd-label-static pl-2">Select Branch*</label>
                            @Html.DropDownList("BranchId", null, htmlAttributes: new { @class = "form-control", @required = true })
                            @*<select class="form-control SubIdDDL" id="SubId" name="SubId" required></select>*@
                        </div>
                    </div>


                    <div class="form-row mt-3">
                        <div class="form-group col-md-12 bmd-form-group">
                            <label for="" class="bmd-label-static pl-2">Select class*</label>
                            @Html.DropDownList("ClassId", null, htmlAttributes: new { @class = "form-control", @required = true })
                            @*<select class="form-control SubIdDDL" id="SubId" name="SubId" required></select>*@
                        </div>
                    </div>

                    <div class="form-row mt-3">
                        <div class="form-group col-md-12 bmd-form-group">
                            <label for="" class="bmd-label-static pl-2">Select Section*</label>
                            @Html.DropDownList("SectionId", null, htmlAttributes: new { @class = "form-control", @required = true })
                            @*<select class="form-control SubIdDDL" id="SubId" name="SubId" required></select>*@
                        </div>
                    </div>
                    <div class="form-row mt-3">
                        <div class="form-group col-md-12 bmd-form-group">
                            <label for="" class="bmd-label-static pl-2">Select Subject*</label>
                            @Html.DropDownList("SubId", null, htmlAttributes: new { @class = "form-control SubIdDDL", @required = true })
                            @*<select class="form-control SubIdDDL" id="SubId" name="SubId" required></select>*@
                        </div>
                    </div>

                    <div class="form-group col-md-4" style="padding-left: 0px;">
                        <label class="bmd-label-floating" style="background: white;margin-left: 0.5rem;border-left: 4px solid white;border-right: 4px solid white;transform: translateY(-1.75rem);top: 1.3rem;color: #AAAAAA;">Start Time <span class="red-mark">*</span> </label>
                        <input type="time" name="StartTime" id="StartTime"  value="@ViewBag.StartTime" class="round-border Floating_text form-control" required/>
                        @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">

                        <div class="col-md-12">

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="box box-primary">
                                        <div class="box-header with-border"><h3 class="orange">Topics:<span class="red-mark">*</span></h3></div>


                                        <div class="box-body">
                                            @Html.ListBox("TopicId", null, htmlAttributes: new { @required = true, @class = "form-control", @style = "height:400px;" })
                                        </div>
                                    </div>
                                </div>


                                <div class="col-md-6">
                                    <div class="box box-primary">
                                        <div class="box-header with-border"><h3 class="orange">Questions:<span class="red-mark">*</span></h3></div>

                                        <div class="box-body">
                                            @Html.ListBox("QuestionID", null, htmlAttributes: new { @required = true, @class = "form-control", @style = "height:400px;" })

                                        </div>
                                    </div>
                                </div>



                            </div>
                        </div>
                    </div>

                    <br>

                    <hr class="mt-5 mb-4">
                    @if (User.IsInRole("Teacher"))
                    {

                        <button type="button" class="btn btn-danger pull-right rounded rounded-lg" id="delete"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Delete &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </button>
                        <button type="submit" class="btn btn-primary pull-right rounded rounded-lg"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Save &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </button>
                        <button type="button" id="btnCancel" class="btn btn-primary pull-right rounded rounded-lg bg-transparent text-muted shadow-none mr-3">
                            <i class="material-icons mr-2">cached</i>  Cancel &nbsp; &nbsp;
                        </button>
                        <div class="clearfix"></div>
                    }
                </div>

                }
            </div>
        </div>
    </div>
</div>