@model SEA_Application.Models.LessonViewModel

@{
    ViewBag.Title = "Create";
    if (User.IsInRole("Teacher"))
    {
        Layout = "~/Views/Shared/_TeacherDashboardLayout.cshtml";
    }else
    {
        Layout = "~/Views/Shared/_BranchAdminDashboardLayout.cshtml";
    }
}

<style>
    .tab {
        display: none;
    }

    .mt-4, .my-4 {
        margin-top: 1.17rem !important;
    }

    /* Make circles that indicate the steps of the form: */
    .step {
        height: 15px;
        width: 15px;
        margin: 0 15px;
        /*background-color: #bbbbbb;*/
        /*border: none;*/
        border-radius: 50%;
        display: inline-block;
        /*opacity: 0.5;*/
    }



        .step.active {
            opacity: 1;
        }

        /* Mark the steps that are finished and valid: */
        .step.finish {
            background-color: #4CAF50;
        }



    #prevBtn {
        color: #afbccc !important;
    }

    #createLessonForm .step {
        font-size: 12px;
        font-weight: 600;
        font-stretch: normal;
        font-style: normal;
        line-height: 21px;
        text-align: center;
        color: #afbccc;
    }

    #createLessonForm .step {
        width: 24px;
        height: 24px;
        background-color: #ffffff;
        border: solid 1px rgba(0, 0, 0, 0.1);
        opacity: 1;
    }

        #createLessonForm .step.active {
            width: 26px;
            height: 26px;
            border: solid 2px #ffffff;
            background-color: #3cd876;
            color: #ffffff;
            box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.16);
        }

        #createLessonForm .step.finish {
            width: 26px;
            height: 26px;
            border: solid 2px #ffffff;
            color: #ffffff;
            background-color: #3cd876;
            box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.16);
        }

            #createLessonForm .step.finish.active {
                /*background-image: none;*/
            }

    .stepsCon {
        position: relative;
        display: inline-block;
        z-index: 6;
    }

        .stepsCon::before {
            content: '';
            background-color: rgba(0, 0, 0, 0.1);
            height: 1px;
            width: calc(100% - 50px);
            position: absolute;
            left: 25px;
            top: calc(50%);
            z-index: -4;
        }

    .step.finish {
        background-image: url(../../assets/assets/icons/finish.png);
        background-repeat: no-repeat;
        background-position: center;
    }

    .tab .leftCol .form-group {
        margin-top: 30px !important;
    }

    .tab .leftCol .input-group .form-group {
        margin-top: 5px !important;
    }

    /*--------WIZARD-----*/

    @@media screen and (max-width: 767px) {
        .tab > .row > .col-md-6.pl-5.pr-5 {
            padding-left: 0 !important;
        }
    }
</style>

<script>
    $(document).ready(function () {

        //alert("@ViewBag.LessonStatus");

        var DropDown = $("#DropdownHiddenValue").val();
        if (DropDown != "") {

            $('#OrderBy').val(DropDown);
        }


        $("#PageHeader").html("Edit Lesson");

        $("#BreadCrumbs").append(' <li> <a  href="/Teacher/Index"> Home </a> <span>&gt;</span></li>');
        $("#BreadCrumbs").append(' <li> <a href="/AspnetSubjectTopics/ViewTopicsAndLessons"> Topics & Lessons </a> <span>&gt;</span></li>');
        $("#BreadCrumbs").append(' <li class="active"><a id="BreadCrumps1" href="#">Edit</a></li>');

        $("#DeleteButton").click(function () {

            var Id = $("#Id").val();

            // window.location.href = "/AspnetSubjectTopics/Delete";

            window.location.href = "/AspnetLessons/DeleteLessons?id=" + Id;

        })

        
             $("#ViewLesson").click(function () {

            var Id = $("#Id").val();

            // window.location.href = "/AspnetSubjectTopics/Delete";

            window.location.href = "/TeacherCommentsOnCourses/StudentLessons?id=" + Id;

        })


        var ContentTypeHiddentValue = $("#ContentTypeHiddentValue").val();


        $("#ContentType").change(function () {

            $("#CreateBtn").prop("disabled", false);
            $('#LessonVideoURL').val("");
            $('#MeetingLink').val("");

            $('#Video').val("");

        })



        $('#ContentType option[value="' + ContentTypeHiddentValue + '"]').prop('selected', true);


        if (ContentTypeHiddentValue == "Video") {
            $("#VideoURL").removeClass("hidden");
            $("#MeetingLinkdiv").addClass("hidden");
            $("#ImageAttachemntFile").addClass("hidden");
        } else if (ContentTypeHiddentValue == "Link") {
            $("#VideoURL").addClass("hidden");
            $("#MeetingLinkdiv").removeClass("hidden");
            $("#ImageAttachemntFile").addClass("hidden");
        } else if (ContentTypeHiddentValue == "Image") {
            $("#VideoURL").addClass("hidden");
            $("#MeetingLinkdiv").addClass("hidden");
            $("#ImageAttachemntFile").removeClass("hidden");
        }



        //        $.ajax({
        //            type: "POST",
        //            cache: false,
        //            url: "/AspNetProject/GetSubjectsByClass?CT=" + course,
        //            processData: false,
        //            contentType: false,
        //            success: function (data) {
        //                var sch = JSON.parse(data);
        //                console.log(sch);
        //                var $el = $(".SubIdDDL");
        //                $el.empty();
        //                var $e2 = $(".TopicIdDDL");
        //                $e2.empty();
        //                if (sch.length > 0) {
        //                    $el.append($("<option></option>")
        //                        .attr("value", "").text('Select Subject'));
        //                    for (i = 0; i < sch.length; i++) {

        //                        $el.append($("<option></option>")
        //                            .attr("value", sch[i].Id).text(sch[i].SubjectName));
        //                    }
        //                }
        //                else {
        //                    $el.append($("<option></option>")
        //                        .attr("value", '').text('Select'));
        //                }
        //            }
        //        });
        ////var course = 'CSS';
        //var Class;
        //$('#CTId').change(function () {

        //    var crse = $(this).val();

        //    if (crse != "") {
        //        console.log(crse);
        //        course = crse;
        //        $.ajax({
        //            type: "POST",
        //            cache: false,
        //            url: "/AspNetProject/GetSubjectsByClass?CT=" + course,
        //            processData: false,
        //            contentType: false,
        //            success: function (data) {
        //                var sch = JSON.parse(data);
        //                console.log(sch);
        //                var $el = $(".SubIdDDL");
        //                $el.empty();
        //                var $e2 = $(".TopicIdDDL");
        //                $e2.empty();
        //                if (sch.length > 0) {
        //                    $el.append($("<option></option>")
        //                        .attr("value", "").text('Select Subject'));
        //                    for (i = 0; i < sch.length; i++) {

        //                        $el.append($("<option></option>")
        //                            .attr("value", sch[i].Id).text(sch[i].SubjectName));
        //                    }
        //                }
        //                else {
        //                    $el.append($("<option></option>")
        //                        .attr("value", '').text('Select'));
        //                }
        //            }
        //        });
        //    }
        //    else {

        //        var $el = $(".SubIdDDL");
        //        $el.empty();
        //        var $e2 = $(".TopicIdDDL");
        //        $e2.empty();

        //    }


        //});


        $("#ContentType").change(function () {

            $("#CreateBtn").prop("disabled", false);
            $('#LessonVideoURL').val("");
            $('#MeetingLink').val("");

            $('#Video').val("");

        })


        $("#ContentType").change(function () {
            var value = $("#ContentType").val();

            if (value == "Video") {

                $("#VideoURL").removeClass("hidden");
                $("#MeetingLinkdiv").addClass("hidden");
                $("#ImageAttachemntFile").addClass("hidden");
            } else if (value == "Link") {
                $("#VideoURL").addClass("hidden");
                $("#MeetingLinkdiv").removeClass("hidden");
                $("#ImageAttachemntFile").addClass("hidden");
            } else if (value == "Image") {
                $("#VideoURL").addClass("hidden");
                $("#MeetingLinkdiv").addClass("hidden");
                $("#ImageAttachemntFile").removeClass("hidden");
            }
            else if (value == "") {
                $("#VideoURL").addClass("hidden");
                $("#MeetingLinkdiv").addClass("hidden");
                $("#ImageAttachemntFile").addClass("hidden");

                $("#CreateBtn").prop("disabled", false);
                $('#LessonVideoURL').val("");
                $('#MeetingLink').val("");

                $('#Video').val("");

            }
        })

        $('#BranchId').change(function () {

            var BranchId = $(this).val();

            if (BranchId != "") {


                $.ajax({
                    type: "POST",
                    cache: false,
                    url: "/AspNetProject/ClassesByBranch?BranchId=" + BranchId,
                    processData: false,
                    contentType: false,
                    success: function (data) {
                        var sch = JSON.parse(data);
                        console.log(sch);
                        var $el = $("#ClassId");
                        $el.empty();
                        var $e2 = $("#SubId");
                        $e2.empty();
                        var $e3 = $(".TopicIdDDL");
                        $e3.empty();
                        var $e4 = $("#SectionId");
                        $e4.empty();

                        if (sch.length > 0) {
                            $el.append($("<option></option>")
                                .attr("value", "").text('Select Class'));
                            for (i = 0; i < sch.length; i++) {

                                $el.append($("<option></option>")
                                    .attr("value", sch[i].Id).text(sch[i].Name));
                            }
                        }
                        else {
                            $el.append($("<option></option>")
                                .attr("value", '').text('Select Class'));
                        }
                    }
                });
            }
            else {
                var $el = $("#ClassId");
                $el.empty();
                var $e2 = $("#SubId");
                $e2.empty();
                var $e3 = $(".TopicIdDDL");
                $e3.empty();
                var $e4 = $("#SectionId");
                $e4.empty();

            }

        });

        $('#ClassId').change(function () {

            var ClassId = $(this).val();
            //Class = UserName;

            if (ClassId != "") {

                $.ajax({
                    type: "POST",
                    cache: false,
                    url: "/AspNetProject/SectionByClasses?ClassId=" + ClassId,
                    processData: false,
                    contentType: false,
                    success: function (data) {
                        var sch = JSON.parse(data);
                        console.log(sch);
                        var $el = $(".SubIdDDL");
                        $el.empty();
                        var $e3 = $(".TopicIdDDL");
                        $e3.empty();
                        var $e4 = $("#SectionId");
                        $e4.empty();

                        if (sch.length > 0) {
                            $e4.append($("<option></option>")
                                .attr("value", "").text('Select Section'));
                            for (i = 0; i < sch.length; i++) {

                                $e4.append($("<option></option>")
                                    .attr("value", sch[i].Id).text(sch[i].Name));
                            }
                        }
                        else {
                            $e4.append($("<option></option>")
                                .attr("value", '').text('Select Section'));
                        }
                    }
                });
            }

            else {

                var $el = $(".SubIdDDL");
                $el.empty();
                var $e3 = $(".TopicIdDDL");
                $e3.empty();

                var $e4 = $("#SectionId");
                $e4.empty();


            }

        });
        $('#SectionId').change(function () {

            var SectionId = $(this).val();
            //Class = UserName;

            if (SectionId != "") {

                $.ajax({
                    type: "POST",
                    cache: false,
                    url: "/AspNetProject/SubjectsByClass?SectionId=" + SectionId,
                    processData: false,
                    contentType: false,
                    success: function (data) {
                        var sch = JSON.parse(data);
                        console.log(sch);
                        var $el = $("#SubId");
                        $el.empty();
                        var $e3 = $(".TopicIdDDL");
                        $e3.empty();


                        if (sch.length > 0) {
                            $el.append($("<option></option>")
                                .attr("value", "").text('Select Subject'));
                            for (i = 0; i < sch.length; i++) {

                                $el.append($("<option></option>")
                                    .attr("value", sch[i].Id).text(sch[i].Name));
                            }
                        }
                        else {
                            $el.append($("<option></option>")
                                .attr("value", '').text('Select Subject'));
                        }
                    }
                });
            }

            else {

                var $el = $("#SubId");
                $el.empty();
                var $e3 = $(".TopicIdDDL");
                $e3.empty();

            }

        });

        $('#SubId').change(function () {

            var BranchId = $("#BranchId").val();
            var ClassId = $("#ClassId").val();
            var SectionId = $("#SectionId").val();
            var SubjectId = $(this).val();

            if (SubjectId != "" && BranchId != "" && ClassId != "") {

                $.ajax({
                    type: "POST",
                    cache: false,
                    //url: "/AspNetProject/GetTopic?BranchId=" + subid,
                    url: "/AspNetProject/GetSubjects?BranchId=" + BranchId + "&&ClassId=" + ClassId + "&&SubjectId=" + SubjectId + "&&SectionId=" + SectionId,
                    processData: false,
                    contentType: false,
                    success: function (data) {
                        var sch = JSON.parse(data);
                        console.log(sch);
                        var $el = $(".TopicIdDDL");
                        $el.empty();

                        if (sch.length > 0) {
                            $el.append($("<option></option>")
                                .attr("value", "").text('Select Topic'));
                            for (i = 0; i < sch.length; i++) {

                                $el.append($("<option></option>")
                                    .attr("value", sch[i].Id).text(sch[i].Name));
                            }
                        }
                        else {
                            $el.append($("<option></option>")
                                .attr("value", '').text('Select'));
                        }
                    }
                });

            }
            else {

                var $el = $(".TopicIdDDL");
                $el.empty();

            }

        });

        //$("form").submit(function () {

        //    debugger

        //    if (document.getElementById("Assignment").files.length == 0) {
        //        console.log("no files selected");
        //    }
        //    else {
        //        var AssignmentName = $("#AssignmentName");
        //        var AssignmentDueDate = $("#AssignmentDueDate");

        //        if (AssignmentName.val() != "" && AssignmentDueDate.val() != "") {
        //        }
        //        else {
        //            $("#AssignmentName").prop('required', true);
        //            $("#AssignmentDescription").prop('required', true);
        //            $("#AssignmentDueDate").prop('required', true);
        //            return false;
        //        }
        //    }



        //    if (document.getElementById("Attachment1").files.length == 0) {
        //        console.log("no files selected");
        //    }
        //    else {
        //        var AttachmentName1 = $("#AttachmentName1");


        //        if (AttachmentName1.val() != "") {

        //        }
        //        else {
        //            $("#AttachmentName1").prop('required', true);
        //            return false;
        //        }
        //    }



        //    if (document.getElementById("Attachment2").files.length == 0) {
        //        console.log("no files selected");
        //    }
        //    else {
        //        var AttachmentName2 = $("#AttachmentName2");

        //        if (AttachmentName2.val() != "") {

        //        }
        //        else {
        //            $("#AttachmentName2").prop('required', true);
        //            return false;
        //        }
        //    }

        //    if (document.getElementById("Attachment3").files.length == 0) {
        //        console.log("no files selected");
        //    }
        //    else {
        //        var AttachmentName3 = $("#AttachmentName3");
        //        if (AttachmentName3.val() != "") {

        //        }
        //        else {
        //            $("#AttachmentName3").prop('required', true);
        //            return false;
        //        }
        //    }
        //});


        $('#Video').change(function () {

            var value = $("#ContentType").val();

            if (value != "Video") {
                return false;
            }

            var url = $('#Video').val();
            if (url != undefined || url != '') {
                var regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=|\?v=)([^#\&\?]*).*/;
                var match = url.match(regExp);
                var embed = "embed/";

                //if (match && match[2].length == 11) {
                if (match != null) {
                    var n = match[1].localeCompare(embed);

                    if (n != 0) {
                        $("#youtubeErrorMsg").text("Please Provide an embed Youtube Link");
                        $("#CreateBtn").prop("disabled", true);
                        return false;
                    }
                    // Do anything for being valid
                    // if need to change the url to embed url then use below line
                    // $('#ytplayerSide').attr('src', 'https://www.youtube.com/embed/' + match[2] + '?autoplay=0');

                    //  alert(" working");
                    var string = $('#Video').val();
                    var src = string.substring(string.indexOf('src="') + 5)
                    var url = src.substring(0, src.indexOf('"'));

                    $('#LessonVideoURL').val(url);
                    $("#youtubeErrorMsg").text("");
                    $("#CreateBtn").prop("disabled", false);
                }
                else {
                    // Do anything for not being valid
                    $("#youtubeErrorMsg").text("Please Provide an embed Youtube Link");
                    $("#CreateBtn").prop("disabled", true);
                }
            }
        })

        $("form").submit(function () {

            //debugger
            debugger
            //alert("working");

            var OrderBy = $("#OrderBy").val();
            var TopicId = $("#TopicId").val();
            var LessonName = $("#LessonName").val();

            if (OrderBy == "" || TopicId == "" || LessonName == "") {
                $("#GenericError").html("Kindly fill all fields on the first tab.");
                return false;
            }

            //  if ($("#AssignmentName").val() != "") {

            //    if (document.getElementById("Assignment").files.length == 0) {

            //        $("#GenericError").html("Kindly provide the Assignment File from Reading material tab.");
            //        return false;
            //    }
            //}

            //if ($("#AssignmentDueDate").val() != "") {
            //    if (document.getElementById("Assignment").files.length == 0) {
            //        $("#GenericError").html("Kindly provide the Assignment File from Reading material tab.");
            //        return false;
            //    }
            //}

            if (document.getElementById("Assignment").files.length == 0) {
                console.log("no files selected");
            }
            else {
                var AssignmentName = $("#AssignmentName");
                var AssignmentDueDate = $("#AssignmentDueDate");

                if (AssignmentName.val() != "" && AssignmentDueDate.val() != "") {
                }
                else {
                    $("#AssignmentName").prop('required', true);
                    //$("#AssignmentDescription").prop('required', true);
                    $("#AssignmentDueDate").prop('required', true);
                    $("#GenericError").html("Kindly provide the Assignment Name and Due Date in Assignment Tab.");
                    return false;
                }
            }


            //if ($("#AttachmentName1").val() != "") {
            //    if (document.getElementById("Attachment1").files.length == 0) {
            //        $("#GenericError").html("Kindly provide the Attacment-1 File from Reading material tab.");
            //        return false;
            //    }
            //}

            //if ($("#AttachmentName2").val() != "") {
            //    if (document.getElementById("Attachment2").files.length == 0) {
            //        $("#GenericError").html("Kindly provide the Attacment-2 File from Reading material tab.");
            //        return false;
            //    }
            //}

            //if ($("#AttachmentName3").val() != "") {
            //    if (document.getElementById("Attachment3").files.length == 0) {
            //        $("#GenericError").html("Kindly provide the Attacment-3 File from Reading material tab.");
            //        return false;
            //    }
            //}

            if (document.getElementById("Attachment1").files.length == 0) {
                console.log("no files selected");
            }
            else {
                var AttachmentName1 = $("#AttachmentName1");


                if (AttachmentName1.val() != "") {

                }
                else {
                    $("#AttachmentName1").prop('required', true);
                    $("#GenericError").html("Kindly provide the Attacment-1 Name from Reading material tab.");
                    return false;
                }
            }

            if (document.getElementById("Attachment2").files.length == 0) {
                console.log("no files selected");
            }
            else {
                var AttachmentName2 = $("#AttachmentName2");

                if (AttachmentName2.val() != "") {

                }
                else {
                    $("#AttachmentName2").prop('required', true);
                    $("#GenericError").html("Kindly provide the Attacment-2 Name from Reading material tab.");
                    return false;
                }
            }

            if (document.getElementById("Attachment3").files.length == 0) {
                console.log("no files selected");
            }
            else {
                var AttachmentName3 = $("#AttachmentName3");
                if (AttachmentName3.val() != "") {

                }
                else {
                    $("#AttachmentName3").prop('required', true);
                    $("#GenericError").html("Kindly provide the Attacment-3 Name from Reading material tab.");
                    return false;
                }
            }

            if (document.getElementById("AttachmentImage").files.length == 0) {
                var value = $("#ContentType").val();
                if (value == "Image") {
                 //   $("#GenericError").html("Kindly provide the image of first tab");
                   // return false;
                }
            }
        });


        $("#btnCancel").click(function () {
            window.location.href = "/AspnetSubjectTopics/ViewTopicsAndLessons";
        })


        var LessonId1 = $("#Id").val();

        $("#LessonCopy").click(function () {
            window.location.href = "/AspnetLessons/LessonCopy?id=" + LessonId1;
        })

        $("#OrderBy").change(function () {

            //  OrderBy();
            // alert($(this).val());

        })

        $("#TopicId").change(function () {

            //   OrderBy();
            //  alert($(this).val());
        })





    })//end of document ready
    function OrderBy() {

        var TopicId = $("#TopicId").val();
        var OrderBy = $("#OrderBy").val();

        if (TopicId != null && TopicId != "" && OrderBy != "" && OrderBy != null) {

            $.ajax({

                type: "POST",
                url: '/AspnetLessons/CheckLessonOrderBy',
                data: { "TopicId": TopicId, "OrderBy": OrderBy },
                success: function (data) {

                    if (data == "Yes") {


                        $("#CreateBtn").attr("disabled", true);

                        $("#ErrorOrderBy").html("Selected order is already assigned to a lesson of same topic.");
                    }
                    else {

                        $("#CreateBtn").attr("disabled", false);
                        $("#ErrorOrderBy").html("");

                    }

                }
            })

        }
        else {
            $("#CreateBtn").attr("disabled", false);
            $("#ErrorOrderBy").html("");

        }


    }

    // $("#ViewAttendance").click(function () {
    function ViewAttendance() {

        var StartDate = $("#StartDate").val();
        var LessonId = $("#Id").val();
        var Type = $("#ContentType option:selected").text();
        var BranchName = $("#BranchId option:selected").text();
        var SectionName = $("#SectionId option:selected").text();
        var ClassName = $("#ClassId option:selected").text();
        var SubjectName = $("#SubId option:selected").text();
        var LessonName = $("#LessonName").val();
        // var SubjectId = $(this).val();

        window.location.href = "/AspnetLessons/ViewAttendance?id=" + LessonId + '&BranchName=' + BranchName + '&ClassName=' + ClassName + '&SectionName=' + SectionName + '&SubjectName=' + SubjectName + '&LessonName=' + LessonName + '&StartDate=' + StartDate + '&Type=' + Type;
    }

    function publishLesson() {
        var Id = $("#Id").val();
            window.location.href = "/AspnetLessons/PubishLesson?id=" + Id;
    }

    function validateYouTubeUrl() {
        var url = $('#LessonVideoURL').val();
        if (url != undefined || url != '') {
            var regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=|\?v=)([^#\&\?]*).*/;
            var match = url.match(regExp);
            if (match && match[2].length == 11) {
                // Do anything for being valid
                // if need to change the url to embed url then use below line
                // $('#ytplayerSide').attr('src', 'https://www.youtube.com/embed/' + match[2] + '?autoplay=0');

                //  alert(" working");
                $("#youtubeErrorMsg").text("");

                $("#CreateBtn").prop("disabled", false);
            }
            else {
                // Do anything for not being valid
                $("#youtubeErrorMsg").text("Please Provide Youtube Link");
                $("#CreateBtn").prop("disabled", true);
            }
        }
    }

    function validURL(str) {
        var pattern = new RegExp('^(https?:\\/\\/)?' + // protocol
            '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
            '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
            '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
            '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
            '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator
        return !!pattern.test(str);
    }

    function validateLinks(ID, errorID) {

        var url = $('#' + ID).val();
        var embed = 'embed';

        if (validURL(url)) {
            if (url.localeCompare(embed) == '0') {
                $('#' + errorID).html("Please don't add Embed URL's for this field");
                $("#CreateBtn").prop("disabled", true);
            } else {
                $('#' + errorID).html("");
                $("#CreateBtn").prop("disabled", false);
            }
        } else {
            $('#' + errorID).html("Please inpt a valid URL's for this field");
            $("#CreateBtn").prop("disabled", true);
        }
    }

</script>


<style>
    .help-block {
        color: red;
    }

    .page-sidebar .page-sidebar-menu, .page-sidebar-closed.page-sidebar-fixed .page-sidebar:hover .page-sidebar-menu {
        list-style: none;
        margin: 0;
        padding: 0;
        height: 2500px !important;
    }

    textarea {
        width: 400px;
        height: 200px;
    }
</style>


<div class="row">
    <div class="col-md-12">
        <div class="card">
                <span id="GenericError" style="color:red;"></span>


                <div class="card-body p-5">


                    @using (Html.BeginForm("Edit", "AspnetLessons", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        @*<form id="createLessonForm" class="md-form">*@
                        <!-- Circles which indicates the steps of the form: -->
                        <span id="GenericError" style="color:red;margin-left:8%"></span>


                        @Html.HiddenFor(model => model.Id)


                        <div class="mb-3 text-center">
                            <div class="inline-block stepsCon">
                                <span class="step">1</span>
                                <span class="step">2</span>
                                <span class="step">3</span>
                                <span class="step">4</span>
                            </div>
                        </div>

                        <!-- One "tab" for each step in the form: -->
                        <div class="tab">

                            <h2 class="column-heading wizard-heading mb-4">Lesson Basic Info</h2>
                            <div class="row">
                                <div class="col-md-6 leftCol">

                                    <div class="form-group bmd-form-group">
                                        <label class="bmd-label-floating">Lesson Name</label>
                                        @Html.EditorFor(model => model.LessonName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.LessonName, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="form-group bmd-form-group my-3">
                                        <label class="bmd-label-static pl-2">Content Type</label>
                                        <select class="form-control" id="ContentType" name="ContentType">
                                            <option value="">Select Type</option>
                                            <option value="Video">Video</option>
                                            <option value="Link">Meeting Link</option>
                                            <option value="Image">Image</option>
                                        </select>
                                    </div>

                                    <input type="hidden" name="name" id="ContentTypeHiddentValue" value="@Model.ContentType" />

                                    <div class="form-group bmd-form-group my-3 hidden" id="MeetingLinkdiv">
                                        <label class="bmd-label-floating">Meeting Link</label>
                                        @Html.EditorFor(model => model.MeetingLink, new { htmlAttributes = new { @placeholder = " ", @class = "form-control", onchange = "validateLinks('MeetingLink' , 'MeetingLink_Error')" } })
                                        @Html.ValidationMessageFor(model => model.MeetingLink, "", new { @class = "text-danger", @id = "MeetingLink_Error" })
                                    </div>

                                    <div class="form-group bmd-form-group my-3 hidden" id="VideoURL">
                                        <label class="bmd-label-floating">Lesson video URL. Enter Youtube Embed video Link</label>
                                        <input id="Video" class="form-control" value="@Model.LessonVideoURL" />
                                        @Html.EditorFor(model => model.LessonVideoURL, new { htmlAttributes = new { @placeholder = " ", @class = "form-control hidden" } })
                                        @Html.ValidationMessageFor(model => model.LessonVideoURL, "", new { @class = "text-danger" })
                                        <span style="color:red;" id="youtubeErrorMsg"></span>
                                    </div>




                                    @if (@ViewBag.ContentTypeImage != null)
                                    {
                                        <div class="form-row hidden" id="ImageAttachemntFile">
                                            <div class="form-group col-md-12 bmd-form-group">
                                                <div class="file-field d-flex">
                                                    <div class="btn btn-primary btn-md mb-0">
                                                        <span onclick='event.stopPropagation(); document.getElementById("AttachmentImage").click();'>Choose file</span>
                                                        <input id="AttachmentImage" name="AttachmentImage" type="file">
                                                        @*<a href="~/Content/LessonImage/@Model.AssignmentName"></a>*@
                                                    </div>
                                                    <div class="file-path-wrapper d-flex align-items-end ml-3 w-100">
                                                        @*<input class="file-path validate form-control" type="text" readonly disabled placeholder="No file Chosen">*@

                                                        <input class="file-path validate form-control" type="text" readonly disabled value="@ViewBag.ContentTypeImage" placeholder="No file Chosen">

                                                    </div>
                                                </div>
                                                <div style="color: #afbccc;font-size: 14px;font-weight: 500;" class="my-3">Max: 32 MB (Filename should be unique)</div>
                                            </div>
                                        </div>

                                    }
                                    else
                                    {

                                        <div class="form-row hidden" id="ImageAttachemntFile">
                                            <div class="form-group col-md-12 bmd-form-group">
                                                <div class="file-field d-flex">
                                                    <div class="btn btn-primary btn-md mb-0">
                                                        <span onclick='event.stopPropagation(); document.getElementById("AttachmentImage").click();'>Choose file</span>
                                                        <input id="AttachmentImage" name="AttachmentImage" type="file">
                                                        @*<a href="~/Content/LessonImage/@Model.AssignmentName"></a>*@
                                                    </div>
                                                    <div class="file-path-wrapper d-flex align-items-end ml-3 w-100">
                                                        @*<input class="file-path validate form-control" type="text" readonly disabled placeholder="No file Chosen">*@
                                                        <input class="file-path validate form-control" type="text" readonly disabled placeholder="No file Chosen">
                                                    </div>
                                                </div>
                                                <div style="color: #afbccc;font-size: 14px;font-weight: 500;" class="my-3">Max: 32 MB (Filename should be unique)</div>
                                            </div>
                                        </div>


                                    }



                                    <div class="form-group bmd-form-group pt-5">
                                        <label class="bmd-label-floating">Lesson Description</label>
                                        <textarea class="form-control" name="LessonDescription" id="LessonDescription" rows="6">@Model.LessonDescription</textarea>
                                        @*@Html.TextAreaFor(model => model.LessonDescription, new { htmlAttributes = new { @rows= "5", @class="form-control" } })
                            @Html.ValidationMessageFor(model => model.LessonDescription, "", new { @class = "text-danger" })*@


                                    </div>


                                    <div class="form-group">
                                        <label class="control-label">Start Date </label>
                                        <input type="date" name="StartDate" id="StartDate" required value="@ViewBag.LessonStartDate" class="form-control" />
                                        @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="form-group">
                                        <label class="control-label">Start Time </label>
                                        <input type="time" name="StartTime" id="StartTime" required value="@ViewBag.LessonStartTime" class="form-control" />
                                        @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                                    </div>


                                </div>

                                <div class="col-md-6 pl-5 pr-5 ">

                                    @*<div class="form-row mt-3">
                            <div class="form-group col-md-12 bmd-form-group">
                                <label for="" class="bmd-label-static pl-2">Select Section*</label>
                                <select class="form-control SecIdDDL" id="SessionId" name="SessionId" required></select>
                            </div>
                        </div>*@

                                    <div class="form-row mt-3">
                                        <div class="form-group col-md-12 bmd-form-group">
                                            <label for="" class="bmd-label-static pl-2">Select Branch*</label>
                                            @Html.DropDownList("BranchId", null, htmlAttributes: new { @class = "form-control", @required = true })
                                            @*<select class="form-control SubIdDDL" id="SubId" name="SubId" required></select>*@
                                        </div>
                                    </div>


                                    <div class="form-row mt-3">
                                        <div class="form-group col-md-12 bmd-form-group">
                                            <label for="" class="bmd-label-static pl-2">Select class*</label>
                                            @Html.DropDownList("ClassId", null, htmlAttributes: new { @class = "form-control", @required = true })
                                            @*<select class="form-control SubIdDDL" id="SubId" name="SubId" required></select>*@
                                        </div>
                                    </div>
                                    <div class="form-row mt-3">
                                        <div class="form-group col-md-12 bmd-form-group">
                                            <label for="" class="bmd-label-static pl-2">Select Section*</label>
                                            @Html.DropDownList("SectionId", null, htmlAttributes: new { @class = "form-control", @required = true })
                                            @*<select class="form-control SubIdDDL" id="SubId" name="SubId" required></select>*@
                                        </div>
                                    </div>
                                    <div class="form-row mt-3">
                                        <div class="form-group col-md-12 bmd-form-group">
                                            <label for="" class="bmd-label-static pl-2">Select Subject*</label>
                                            @Html.DropDownList("SubId", null, htmlAttributes: new { @class = "form-control SubIdDDL", @required = true })
                                            @*<select class="form-control SubIdDDL" id="SubId" name="SubId" required></select>*@
                                        </div>
                                    </div>

                                    <div class="form-row mt-3">
                                        <div class="form-group col-md-12 bmd-form-group">
                                            <label for="" class="bmd-label-static pl-2">Select Topic*</label>

                                            @Html.DropDownList("TopicId", null, htmlAttributes: new { @class = "form-control TopicIdDDL", @required = true })
                                        </div>
                                    </div>



                                    <div class="form-row mt-4">
                                        <div class="form-group col-md-12 bmd-form-group">
                                            <label for="" class="bmd-label-static pl-2">Order By </label>
                                            <input type="hidden" name="name" id="DropdownHiddenValue" value="@ViewBag.OrderBy" />
                                            <select class="form-control" id="OrderBy" name="OrderBy">

                                                <option value="">Select One</option>
                                                <option value="1">1</option>
                                                <option value="2">2</option>
                                                <option value="3">3</option>
                                                <option value="4">4</option>
                                                <option value="5">5</option>
                                                <option value="6">6</option>
                                                <option value="7">7</option>
                                                <option value="8">8</option>
                                                <option value="9">9</option>
                                                <option value="10">10</option>

                                            </select>
                                            <br />
                                            <span id="ErrorOrderBy" style="color:red"></span>

                                        </div>
                                    </div>


                                    <div class="form-row mt-3">
                                        <div class="form-group col-md-12 bmd-form-group">
                                            <label class="bmd-label-floating">Lesson Duration*</label>
                                            <input type="number" min="10" max="120" value="@ViewBag.LessonDuration" onkeydown="return false" class="form-control" name="LessonDuration" id="LessonDuration" required />
                                            @Html.ValidationMessageFor(model => model.LessonDuration, "", new { @class = "text-danger" })

                                        </div>
                                    </div>


                                </div>

                            </div>


                        </div>
                        <div class="tab">
                            <h2 class="column-heading wizard-heading mb-4">Student Assignment</h2>

                            <div class="row">
                                <div class="col-md-6 leftCol">

                                    <div class="form-group bmd-form-group">
                                        <label class="bmd-label-floating">Assignment Name</label>
                                        @Html.EditorFor(model => model.AssignmentName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.AssignmentName, "", new { @class = "text-danger" })
                                    </div>
                                    <br />
                                    <br />

                                    <div class="form-group">
                                        <label class="control-label">Assignment Due Date </label>
                                        <input type="date" name="AssignmentDueDate" id="AssignmentDueDate" value="@ViewBag.Date" class="form-control" />
                                        @Html.ValidationMessageFor(model => model.AssignmentDueDate, "", new { @class = "text-danger" })

                                    </div>

                                    <div class="form-group">
                                        <label class="control-label">Total Marks </label>
                                        @Html.EditorFor(model => model.TotalMarks, new { htmlAttributes = new { @type = "number", @class = "form-control" } })

                                        @*<input type="text" name="TotalMarks" id="TotalMarks" value="" class="form-control" />*@

                                    </div>

                                    <div class="form-group">
                                        <label class="control-label">Assignment Type</label>
                                        @Html.DropDownList("AssignmentType", null, htmlAttributes: new { @class = "form-control", @required = true })
                                        @*@Html.EditorFor(model => model.AssignmentType, new { htmlAttributes = new { @type = "number", @class = "form-control" } })*@
                                        @*<input type="text" name="TotalMarks" id="TotalMarks" value="" class="form-control" />*@

                                    </div>

                                </div>

                                <div class="col-md-6 pl-5 pr-5 ">

                                    <div class="form-group bmd-form-group mt-3 pt-3">
                                        <label class="bmd-label-floating">Assignment Description</label>
                                        <textarea name="AssignmentDescription" id="AssignmentDescription" class="form-control" rows="5">@Model.AssignmentDescription</textarea>

                                    </div>

                                    @if (Model.AssignmentName != null)
                                    {
                                        <div class="form-row mt-5">
                                            <div class="form-group col-md-12 bmd-form-group">
                                                <div class="file-field d-flex">
                                                    <div class="btn btn-primary btn-md mb-0">
                                                        <span onclick='event.stopPropagation();  document.getElementById("Assignment").click();'>Choose file</span>
                                                        <input id="Assignment" name="Assignment" type="file">
                                                        <a href="~/Content/StudentAssignments/@Model.AssignmentName"></a>
                                                    </div>
                                                    <div class="file-path-wrapper d-flex align-items-end ml-3 w-100">
                                                        <input class="file-path validate form-control" type="text" readonly disabled value="@ViewBag.AssignmentFileName" placeholder="No file Chosen">
                                                    </div>
                                                </div>
                                                <div style="color: #afbccc;font-size: 14px;font-weight: 500;" class="my-3">Max: 32 MB (Filename should be unique)</div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="form-row">
                                            <div class="form-group col-md-12 bmd-form-group">
                                                <div class="file-field d-flex">
                                                    <div class="btn btn-primary btn-md mb-0">
                                                        <span onclick='event.stopPropagation(); document.getElementById("Assignment").click();'>Choose file</span>
                                                        <input id="Assignment" name="Assignment" type="file">
                                                    </div>
                                                    <div class="file-path-wrapper d-flex align-items-end ml-3 w-100">
                                                        <input class="file-path validate form-control" type="text" readonly disabled placeholder="No file Chosen">
                                                    </div>
                                                </div>
                                                <div style="color: #afbccc;font-size: 14px;font-weight: 500;" class="my-3">Max: 32 MB (Filename should be unique)</div>
                                            </div>
                                        </div>
                                    }


                                    <div style="margin-bottom: 100px;"></div>
                                </div>
                            </div>
                        </div>

                        <div class="tab">
                            <h2 class="column-heading wizard-heading mb-4">Reading Material</h2>

                            <div class="row">
                                <div class="col-md-6 leftCol">

                                    <div class="form-group bmd-form-group">
                                        <label class="bmd-label-floating">Attachment Name-1</label>
                                        @Html.EditorFor(model => model.AttachmentName1, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.AttachmentName1, "", new { @class = "text-danger" })
                                    </div>

                                    @if (Model.AttachmentName1 != null)
                                    {
                                        <div class="form-row">
                                            <div class="form-group col-md-12 bmd-form-group">
                                                <div class="file-field d-flex">
                                                    <div class="btn btn-primary btn-md mb-0">
                                                        <span onclick='event.stopPropagation(); document.getElementById("Attachment1").click();'>Choose file</span>
                                                        <input id="Attachment1" name="Attachment1" type="file">
                                                        <a href="~/Content/StudentAssignments/@Model.AttachmentName1"></a>
                                                    </div>
                                                    <div class="file-path-wrapper d-flex align-items-end ml-3 w-100">
                                                        <input class="file-path validate form-control" type="text" readonly value="@ViewBag.Attachment1FileName" disabled placeholder="No file Chosen">
                                                    </div>
                                                </div>
                                                <div style="color: #afbccc;font-size: 14px;font-weight: 500;" class="my-3">Max: 32 MB (Filename should be unique)</div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="form-row">
                                            <div class="form-group col-md-12 bmd-form-group">
                                                <div class="file-field d-flex">
                                                    <div class="btn btn-primary btn-md mb-0">
                                                        <span onclick='event.stopPropagation(); document.getElementById("Attachment1").click();'>Choose file</span>
                                                        <input id="Attachment1" name="Attachment1" type="file">
                                                    </div>
                                                    <div class="file-path-wrapper d-flex align-items-end ml-3 w-100">
                                                        <input class="file-path validate form-control" type="text" readonly disabled placeholder="No file Chosen">
                                                    </div>
                                                </div>
                                                <div style="color: #afbccc;font-size: 14px;font-weight: 500;" class="my-3">Max: 32 MB (Filename should be unique)</div>
                                            </div>
                                        </div>
                                    }


                                    <div class="form-group bmd-form-group">
                                        <label class="bmd-label-floating">Attachment Name-3</label>
                                        @Html.EditorFor(model => model.AttachmentName3, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.AttachmentName3, "", new { @class = "text-danger" })
                                    </div>

                                    @if (Model.AttachmentName3 != null)
                                    {
                                        <div class="form-row">
                                            <div class="form-group col-md-12 bmd-form-group">
                                                <div class="file-field d-flex">
                                                    <div class="btn btn-primary btn-md mb-0">
                                                        <span onclick='event.stopPropagation(); document.getElementById("Attachment3").click();'>Choose file</span>
                                                        <input id="Attachment3" name="Attachment3" type="file">
                                                        <a href="~/Content/StudentAssignments/@Model.AttachmentName3"></a>
                                                    </div>
                                                    <div class="file-path-wrapper d-flex align-items-end ml-3 w-100">
                                                        <input class="file-path validate form-control" type="text" readonly disabled value="@ViewBag.Attachment3FileName" placeholder="No file Chosen">
                                                    </div>
                                                </div>
                                                <div style="color: #afbccc;font-size: 14px;font-weight: 500;" class="my-3">Max: 32 MB (Filename should be unique)</div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="form-row">
                                            <div class="form-group col-md-12 bmd-form-group">
                                                <div class="file-field d-flex">
                                                    <div class="btn btn-primary btn-md mb-0">
                                                        <span onclick='event.stopPropagation(); document.getElementById("Attachment3").click();'>Choose file</span>
                                                        <input id="Attachment3" name="Attachment3" type="file">
                                                    </div>
                                                    <div class="file-path-wrapper d-flex align-items-end ml-3 w-100">
                                                        <input class="file-path validate form-control" type="text" readonly disabled placeholder="No file Chosen">
                                                    </div>
                                                </div>
                                                <div style="color: #afbccc;font-size: 14px;font-weight: 500;" class="my-3">Max: 32 MB (Filename should be unique)</div>
                                            </div>
                                        </div>
                                    }

                                </div>

                                <div class="col-md-6 pl-5 pr-5 leftCol">

                                    <div class="form-group bmd-form-group">
                                        <label class="bmd-label-floating">Attachment Name-2</label>
                                        @Html.EditorFor(model => model.AttachmentName2, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.AttachmentName2, "", new { @class = "text-danger" })
                                    </div>

                                    @if (Model.AttachmentName2 != null)
                                    {
                                        <div class="form-row">
                                            <div class="form-group col-md-12 bmd-form-group">
                                                <div class="file-field d-flex">
                                                    <div class="btn btn-primary btn-md mb-0">
                                                        <span onclick='event.stopPropagation(); document.getElementById("Attachment2").click();'>Choose file</span>
                                                        <input id="Attachment2" name="Attachment2" type="file">
                                                        <a href="~/Content/StudentAssignments/@Model.AttachmentName2"></a>
                                                    </div>
                                                    <div class="file-path-wrapper d-flex align-items-end ml-3 w-100">
                                                        <input class="file-path validate form-control" type="text" readonly disabled value="@ViewBag.Attachment2FileName" placeholder="No file Chosen">
                                                    </div>
                                                </div>
                                                <div style="color: #afbccc;font-size: 14px;font-weight: 500;" class="my-3">Max: 32 MB (Filename should be unique)</div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="form-row">
                                            <div class="form-group col-md-12 bmd-form-group">
                                                <div class="file-field d-flex">
                                                    <div class="btn btn-primary btn-md mb-0">
                                                        <span onclick='event.stopPropagation(); document.getElementById("Attachment2").click();'>Choose file</span>
                                                        <input id="Attachment2" name="Attachment2" type="file">
                                                    </div>
                                                    <div class="file-path-wrapper d-flex align-items-end ml-3 w-100">
                                                        <input class="file-path validate form-control" type="text" readonly disabled placeholder="No file Chosen">
                                                    </div>
                                                </div>
                                                <div style="color: #afbccc;font-size: 14px;font-weight: 500;" class="my-3">Max: 32 MB (Filename should be unique)</div>
                                            </div>
                                        </div>
                                    }

                                </div>
                            </div>
                        </div>

                        <div class="tab">
                            <h2 class="column-heading wizard-heading mb-4">Material Links (URL)</h2>

                            <div class="row">

                                <div class="col-md-6 leftCol">

                                    <div class="form-group bmd-form-group">
                                        <label class="bmd-label-floating">Material Link 1</label>
                                        @Html.EditorFor(model => model.LinkUrl1, new { htmlAttributes = new { @placeholder = "Enter Data Must be a URL", @class = "form-control LinkUrl", onchange = "validateLinks('LinkUrl1' , 'LinkUrl1_Error')" } })
                                        @Html.ValidationMessageFor(model => model.LinkUrl1, "", new { @class = "text-danger", @id = "LinkUrl1_Error" })
                                    </div>

                                    <div class="form-group bmd-form-group mt-4">
                                        <label class="bmd-label-floating">Material Link 3</label>
                                        @Html.EditorFor(model => model.LinkUrl3, new { htmlAttributes = new { @placeholder = "Enter Data Must be a URL", @class = "form-control LinkUrl", onchange = "validateLinks('LinkUrl3' , 'LinkUrl3_Error')" } })
                                        @Html.ValidationMessageFor(model => model.LinkUrl3, "", new { @class = "text-danger", @id = "LinkUrl3_Error" })
                                    </div>



                                    <div style="margin-bottom: 100px;">&nbsp;</div>
                                    <div style="margin-bottom: 100px;">&nbsp;</div>


                                </div>

                                <div class="col-md-6 pl-5 pr-5 leftCol">


                                    <div class="form-group bmd-form-group">
                                        <label class="bmd-label-floating">Material Link 2</label>
                                        @Html.EditorFor(model => model.LinkUrl2, new { htmlAttributes = new { @placeholder = "Enter Data Must be a URL", @class = "form-control LinkUrl", onchange = "validateLinks('LinkUrl2' , 'LinkUrl2_Error')" } })
                                        @Html.ValidationMessageFor(model => model.LinkUrl2, "", new { @class = "text-danger", @id = "LinkUrl2_Error" })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <hr class="mt-5 mb-4">


                        <button id="prevBtn" onclick="nextPrev(-1)" class="btn btn-primary pull-left rounded rounded-lg bg-transparent text-muted shadow-none mr-3" type="button">Back</button>



                        <button class="btn btn-primary pull-left rounded rounded-lg shadow-none mr-3" type="button" id="nextBtn" onclick="nextPrev(1)">Next</button>

                        if (User.IsInRole("Teacher"))
                        {
                            <button type="button" id="LessonCopy" class="btn btn-primary pull-right rounded rounded-lg mr-3">
                                Create Lesson Copy &nbsp; &nbsp;

                            </button>

                            <button type="button" id="DeleteButton" class="btn btn-danger pull-right rounded rounded-lg mr-3">
                                Delete &nbsp; &nbsp;
                            </button>

                            <input type="submit" value="Update" id="CreateBtn" class="btn btn-success pull-right rounded rounded-lg shadow-none mr-3" />
                        }

                        @*<button onclick="/*showTab(0); currentTab = 0;*/" class="btn btn-primary pull-right rounded rounded-lg bg-transparent text-muted shadow-none mr-3" type="reset">
                <i class="material-icons mr-2">cached</i>  Reset &nbsp; &nbsp;
                <div class="ripple-container"></div>
            </button>*@


                        <button type="button" id="ViewLesson" class="btn btn-success pull-right rounded rounded-lg mr-3">
                            View Lesson &nbsp; &nbsp;
                        </button>

                        if (User.IsInRole("Branch_Admin"))
                        {
                            if (ViewBag.LessonStatus != true)
                            {
                                <button onclick="publishLesson()" class="btn btn-success pull-right rounded rounded-lg shadow-none mr-3" type="button">
                                    Publish &nbsp; &nbsp;
                                    <div class="ripple-container"></div>
                                </button>
                            }

                            <input type="submit" value="Update" id="CreateBtn" class="btn btn-success pull-right rounded rounded-lg shadow-none mr-3" />

                        }

                        <button onclick="ViewAttendance()" class="btn btn-success pull-right rounded rounded-lg shadow-none mr-3" type="button">
                            View Attendance &nbsp; &nbsp;
                            <div class="ripple-container"></div>
                        </button>



                        @*<button type="button" id="DeleteButton" class="btn btn-danger  rounded rounded-lg"> Delete </button>*@




                        <div class="clearfix"></div>
                        @*</form>*@
                    }
                </div>
        </div>
    </div>
</div>