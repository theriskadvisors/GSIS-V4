@model SEA_Application.Models.AspNetStudent

@{
    ViewBag.Title = "Create";
    if (User.IsInRole("Branch_Admin") || User.IsInRole("Branch_Principal"))
    {
        Layout = "~/Views/Shared/_BranchAdminDashboardLayout.cshtml";
    }
    else if (User.IsInRole("Accountant"))
    {
        Layout = "~/Views/Shared/_AccountantDashboardLayout.cshtml";
    }
}

<script>
    $(document).ready(function () {


        $("#PageHeader").html("Add Student");

        $("#BreadCrumbs").append(' <li> <a href="#"> Home </a> <span>&gt;</span></li>');
        $("#BreadCrumbs").append(' <li class="active"><a id="BreadCrumps1" href="#">Create</a></li>');


        $("#UploadImg").change(function () {
            readURL(this);
        });

        $("#branchddl").change(function () {
            var branchid = $(this).val();
            $.ajax({
                type: "POST",
                cache: false,
                url: "/AspNetStudents/ClassDDL?id=" + branchid,
                processData: false,
                contentType: false,
                success: function (data) {
                    debugger;
                    var sch = JSON.parse(data);
                    for (i = 0; i < sch.length; i++) {

                        var x = sch[i].Name;

                    }
                    var $el = $(".ClassIdDDL");
                    $el.empty();
                    if (sch.length > 0) {
                        $el.append($("<option></option>")
                            .attr("value", 0).text('Select Class'));
                        for (i = 0; i < sch.length; i++) {
                            $el.append($("<option></option>")
                                .attr("value", sch[i].Id).text(sch[i].Name));
                        }
                    }
                    else {
                        $el.append($("<option></option>")
                            .attr("value", '').text('Select Class'));
                    }
                }
            });
        });

        $("#changediv").hide();

        $("#chngPass").click(function () {
            $("#infodiv").hide();
            $("#changediv").show();
            $("#savechanges").hide();
            $("#return").hide();

        })

        $("#showprof").click(function () {
            $("#infodiv").show();
            $("#changediv").hide();
            $("#savechanges").show();
            $("#return").show();

        })
        $("#Pass").bind('blur', function () {
            var password = $("#Pass").val();

            var patt = new RegExp("^(?=.{6,})(?=.*[a-z])(?=.*[0-9])(?=.*[A-Z])(?=.*[@@#$%^&+=]).*$");
            var test = patt.test(password);

            if (test == false) {
                $('#Password-Error').html("There should be one uppercase, one lowercase, one special chracter('@@#$%^&+=') and one number in password");
                $('#submit').prop('disabled', true);
            } else {
                $('#Password-Error').html('');
                $('#submit').prop('disabled', false);
            }

        });
        $("#submit").click(function () {
            debugger;
            var roll = $("#RollNo").val();
            if (roll == "") {
                $('#UserName-Error').html("This field is required");
                $('#submit').prop('disabled', true);
                $('#UserName-Error').attr("color", "red");

            }
            else {
                $('#UserName-Error').html("");
                $('#submit').prop('disabled', false);
            }
        })

        $("#E_mail").bind('blur', function () {
            var email = $("#E_mail").val();
            var patt = /^(([^<>()[\]\\.,;:\s@@\"]+(\.[^<>()[\]\\.,;:\s@@\"]+)*)|(\".+\"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            var test = patt.test(String(email).toLocaleLowerCase());

            if (test == false) {
                $('#Email-Error').html("Email is not in Correct Formate");
                $('#submit').prop('disabled', true);
            } else {
                $('#Email-Error').html("");
                $('#submit').prop('disabled', false);
            }
        });


        $("#E_mail").bind('blur', function () {
            var email = $("#E_mail").val();

            $.ajax({
                type: "POST",
                url: "/AspnetStudents/IsEmailExist",
                data: { "Email": email },
                success: function (data) {
                    console.log(data);
                    if (data == 0) {
                        $('#submit').prop('disabled', false);
                        $('#Email-Error1').html("");
                    }
                    else {
                        $('#Email-Error1').html("Email Already taken");
                        $('#submit').prop('disabled', true);
                    }

                }
            });
        });
        $("#UserName").bind('blur', function () {
            var rollno = $("#UserName").val();

            $.ajax({
                type: "POST",
                url: "/AspnetStudents/IsRollNoExist",
                data: { "RollNo": rollno },
                success: function (data) {
                    console.log(data);
                    if (data == 0) {
                        $('#submit').prop('disabled', false);
                        $('#RollNoError').html("");
                    }
                    else {
                        $('#RollNoError').html("Roll Already taken");
                        $('#submit').prop('disabled', true);
                    }

                }
            });




        });




        $("#CnfmPass").bind('blur', function () {
            var cnfm = $("#CnfmPass").val();
            var newpass = $("#Pass").val();

            if (cnfm != newpass) {
                $('#CnfmPass-Error').html("New Password and Confirm Password does not match");
                $('#submit').prop('disabled', true);
            } else {
                $('#submit').prop('disabled', false);
                $('#CnfmPass-Error').html(" ");
            }

        });

        //$("#RollNo").bind('blur', function () {
        //    var userName = $("#RollNo").val();
        //    $.ajax({
        //        type: "POST",
        //        url: "/AspNetStudents/GetUserName",
        //        data: { "userName": userName },
        //        success: function (data) {
        //            if (data.count == 0) {
        //                $('#submit').removeAttr('disabled');
        //                $('#UserName-Error').html("");
        //            }
        //            else {
        //                $('#UserName-Error').html("RollNumber Already taken by " + data.by);
        //                $('#submit').prop('disabled', true);
        //            }

        //        }
        //    });

        //});
    });



    function Return() {
        window.location.href = "StudentIndex"
    }
    function checkPhone(phone) {
        var length = phone.value.length;

        if (length == 11) {
            var patt = new RegExp("^[0]+[0-9]{10,}$");
            var test = patt.test(phone.value);
            console.log(test);
            if (test == false) {
             $('#Phone-Error').html("Phone number is not in correct formate");


                $('#submit').prop('disabled', true);
            } else {
                $('#submit').prop('disabled', false);
                $('#Phone-Error').html(" ");
            }
        } else {
           $('#Phone-Error').html("Phone number is not in correct formate");
            $('#submit').prop('disabled', true);
        }
    }

    function readURL(input) {
        $("#UploadPhotoDiv").hide();
        $("#imgPreview").height("150");
        $("#imgPreview").width("150");

        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#imgPreview').attr('src', e.target.result);
            }
            reader.readAsDataURL(input.files[0]);
        }
    }

</script>
<style>
    .col-md-2 {
        width: 19.666667%;
    }

    .content {
        padding: 0px;
    }

    #navbox a:hover {
        background-color: transparent !important;
        color: white;
        border-bottom: 4px solid white;
    }

    #navbox a:focus {
        background-color: transparent !important;
        color: white;
        border-bottom: 4px solid white;
    }

    textarea {
        height: 100px;
        width: 718px;
    }

    span {
        color: #9d9d9d;
    }
</style>

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body p-5">

                @using (Html.BeginForm("Create", "AspNetStudents", FormMethod.Post, new { enctype = "multipart/form-data", @class = "forms form-horizontal", role = "form", id = "Registerform" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="row">
                        <div class="col-md-2 pl-3 pr-5">
                            <div style="height: 120px;" class="upload-photo border rounded d-flex align-items-center justify-content-center flex-column mb-4">
                                <a href="#">
                                    <img id="imgPreview" src="~/Content/Images/Upload.png" onclick="$('#UploadImg').click();" />
                                </a>
                                <input style="display:none;" id="UploadImg" type="file" name="image" />
                                <div id="UploadPhotoDiv" class="mt-3">Upload Photo</div>
                            </div>
                        </div>

                        <div class="col-md-5 pl-5 pr-5 border-right border-color-sea">
                            <h2 class="column-heading mb-4">User Information</h2>

                            <div class="form-group bmd-form-group">
                                @*<label class="bmd-label-floating">Name <span class="red-mark">*</span></label>*@
                                <span>Name</span>
                                <input type="text" name="FName" id="first" class="form-control round-border" required />
                            </div>

                            <div class="form-group bmd-form-group">
                                @*<label class="bmd-label-floating">Branch <span class="red-mark">*</span></label>*@
                                <span>Branch</span>
                                @Html.DropDownList("BranchId", null, htmlAttributes: new { @class = "form-control round-border", @id = "branchddl" })
                                @Html.ValidationMessageFor(model => model.BranchId, "", new { @class = "text-danger" })
                            </div>



                            <div class="form-group bmd-form-group">
                                @*<label class="bmd-label-floating">Nationality <span class="red-mark">*</span></label>*@
                                <span>Nationality</span>
                                @Html.DropDownList("NationalityId", null, htmlAttributes: new { @class = "form-control round-border" })
                                @Html.ValidationMessageFor(model => model.NationalityId, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group bmd-form-group">
                                <span>Religion</span>
                                @*<label class="bmd-label-floating">Religion <span class="red-mark">*</span></label>*@
                                @Html.DropDownList("ReligionId", null, htmlAttributes: new { @class = "form-control round-border" })
                                @Html.ValidationMessageFor(model => model.ReligionId, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group bmd-form-group">
                                @*<label class="bmd-label-floating">Gender <span class="red-mark">*</span></label>*@
                                <span>Gender</span>
                                @Html.DropDownList("GenderId", null, htmlAttributes: new { @class = "form-control round-border" })
                                @Html.ValidationMessageFor(model => model.GenderId, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group bmd-form-group">
                                @*<label class="bmd-label-floating">Birth Date <span class="red-mark">*</span></label>*@
                                <span>Birth Date</span>
                                @Html.EditorFor(model => model.Birthdate, new { htmlAttributes = new { @class = "form-control round-border", @type = "Date", @required = "required" } })
                                @Html.ValidationMessageFor(model => model.Birthdate, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group bmd-form-group">
                                @*<label class="bmd-label-floating">Phone <span class="red-mark">*</span></label>*@
                                <span>Phone</span>
                                @Html.EditorFor(model => model.CellNo, new { htmlAttributes = new { @class = "form-control round-border", @onblur = "checkPhone(this)", @required = "required" } })
                                @Html.ValidationMessageFor(model => model.CellNo, "", new { @class = "text-danger", @id = "Phone-Error" })
                            </div>

                            @*<div class="form-group bmd-form-group">
                                    <label class="bmd-label-floating">Address <span class="red-mark">*</span></label>
                                    @Html.TextAreaFor(model => model.Address, new { htmlAttributes = new { @class = "form-control round-border" } })
                                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                                </div>*@
                        </div>

                        <div class="col-md-5 pl-5 pr-5 border-right border-color-sea">
                            <h2 class="column-heading mb-4">Account Information</h2>

                            <div class="form-group bmd-form-group my-3 is-filled">
                                @*<label class="bmd-label-floating">Roll Number <span class="red-mark">*</span></label>*@
                                <span>Roll Number</span>
                                <input type="text" id="UserName" class="form-control round-border" name="RollNo" />
                                <span style="color:red" id="RollNoError"></span>
                            </div>

                            <div class="form-group bmd-form-group">
                                <span>Email</span>
                                <input type="text" name="Email" id="E_mail" class="form-control" required>
                                <span id="Email-Error" style="color:red"></span>
                                <br />
                                <span id="Email-Error1" style="color:red"></span>
                            </div>

                            <div class="form-group bmd-form-group">
                                <span>Password</span>
                                <input type="password" name="Password" id="Pass" class="form-control" required>
                                @Html.ValidationMessageFor(model => model.CellNo, "", new { @class = "text-danger", @id = "Password-Error" })
                            </div>

                            <div class="form-group bmd-form-group">
                                <span>Confirm Password</span>
                                <input type="password" name="ConfirmPassword" id="CnfmPass" class="form-control" required>
                                @Html.ValidationMessageFor(model => model.CellNo, "", new { @class = "text-danger !important", @id = "CnfmPass-Error", @style = "color:red" })
                            </div>
                        </div>
                        <hr class="mt-5 mb-4">
                    </div>

                    <div class="pull-right">
                        <button class="btn btn-primary" id="submit" type="submit" form="Registerform">Save</button>
                        <button id="cancel" type="button" class="btn btn-primary pull-right rounded rounded-lg bg-transparent text-muted shadow-none mr-3">
                            <i class="material-icons mr-2">cached</i>  Cancel &nbsp; &nbsp;
                        </button>
                        <div class="clearfix"></div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>


<div>
    <div class="box-header with-border"><h3 class="orange">Upload Excel File &nbsp; <i class="fa fa-file-excel-o" aria-hidden="true"></i></h3></div>
    <div class="form-three widget-shadow">
        @using (Html.BeginForm("StudentsfromFile", "BranchAdmin", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            
                <input id="teachers" required="required" name="students" type="file" />
            <div class="form-group">
                <div class="control-label col-md-3"><b></b></div>
                <div class="col-md-4">
                   
                </div>
            </div>
            <br />
            <br />
            <div class="box-footer">
                <div class="form-group">
                    <div class="col-md-10" style="padding-left:0px">
                        <input class="col-md-2" type="submit" value="Submit" style="border-radius:35px;color:white;border:hidden;background-color:#128edb;font-size:11px;width:98px;height:38px;font-family:Montserrat" />
                    </div>
                </div>
            </div>
        }
    </div>
</div>