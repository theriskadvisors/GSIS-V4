@model SEA_Application.Models.StudentUserViewModel

<script>
    $(document).ready(function () {

        $("#SessionName").prop('required', true);
        $("#Status").prop('required', true);
        $("#SessionStartDate").prop('required', true);
        $("#SessionStartDate").prop('type', 'date');
        $("#SessionEndDate").prop('required', true);
        $("#SessionEndDate").prop('type', 'date');


        //$("#SessionStartDate").datepicker({
        //    dateFormat: 'dd/mm/yy',
        //    changeMonth: true,
        //    changeYear: true,
        //    duration: "slow",
        //    yearRange: '1960:2030'
        //});

        //$("#SessionEndDate").datepicker({
        //    dateFormat: 'dd/mm/yy',
        //    changeMonth: true,
        //    changeYear: true,
        //    duration: "slow",
        //    yearRange: '1960:2030'
        //});

        $('#cancel').click(function () {
            window.location.href = '@Url.Action("Dashboard", "Account")';
        });
    });

    function isempty(item) {
        var start = $("#SessionStartDate").val();
        var end = $("#SessionEndDate").val();

        if (start == "" && end == "") {
            $(item).prop('placeholder', "Please add the date");
            $('#submit').prop('disabled', true);
        } else {
            $('#submit').prop('disabled', false);
        }
    }


    function onCancel() {
        $('#cancel').click();
    }
    function onSave() {
        $('#FormSubmit').click();
    }

</script>
<h4 class="orange">Add Student</h4>
<div class="row" style="padding-bottom: 10px; padding-top: 10px; padding-left: 20px; padding-right: 20px;">
    <button class="btn btn-danger pull-left btn-sm" onclick="onCancel()">
        Cancel
    </button>
    <button class="pull-right" style="background-color: transparent; border: none; outline: none; font-size: 20px; color: rgb(89, 89, 89) !important" onclick="onSave()">
        <i class="fa fa-floppy-o"></i>
    </button>
</div>
@using (Html.BeginForm("CreateStudent", "BranchAdmin", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()


    <div class="box box-primary">
        <div class="box-title"></div>
        <hr />
        <div class="box-body">
            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    <label class="col-md-2 control-label" for="UserName">Student Name: <span class="red-mark">*</span></label>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-md-2 control-label" for="UserName">Roll Number: <span class="red-mark">*</span></label>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.RollNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RollNo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-md-2 control-label" for="UserName">Profile Picture: <span class="red-mark">*</span></label>
                    <div class="col-md-6">
                        <input type="file" accept="image/*" name="ProfilePic" class = "form-control" />
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-md-2 control-label" for="UserName">Address: <span class="red-mark">*</span></label>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>
                </div>
                

                <div class="box box-primary">
                    <div class="box-title">
                        User Information
                    </div>
                    <div class="box-body">
                        <div class="form-group">
                            <label class="col-md-2 control-label" for="UserName">Username: <span class="red-mark">*</span></label>
                            <div class="col-md-6">
                                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-md-2 control-label" for="UserName">Email: <span class="red-mark">*</span></label>
                            <div class="col-md-6">
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-md-2 control-label" for="UserName">Password: <span class="red-mark">*</span></label>
                            <div class="col-md-6">
                                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="box-title"></div>

                <div class="form-group">
                    <label class="col-md-2 control-label" for="UserName">Branch: <span class="red-mark">*</span></label>
                    <div class="col-md-6">
                        @Html.DropDownListFor(model => model.BranchId, (IEnumerable<SelectListItem>)ViewBag.Branches, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.BranchId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-md-2 control-label" for="UserName">Class: <span class="red-mark">*</span></label>
                    <div class="col-md-6">
                        @Html.DropDownListFor(model => model.Class, (IEnumerable<SelectListItem>)ViewBag.Class, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Class, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-md-2 control-label" for="UserName">Section: <span class="red-mark">*</span></label>
                    <div class="col-md-6">
                        @Html.DropDownListFor(model => model.Section, (IEnumerable<SelectListItem>)ViewBag.Section, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Section, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-md-2 control-label" for="UserName">Session: <span class="red-mark">*</span></label>
                    <div class="col-md-6">
                        @Html.DropDownListFor(model => model.Session, (IEnumerable<SelectListItem>)ViewBag.Session, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Session, "", new { @class = "text-danger" })
                    </div>
                </div>


            </div>
        </div>
        <input id="FormSubmit" type="submit" value="Save" class="btn btn-primary" />
    </div>
}

<div id="modal-error-username" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Username already taken</h3>
                <a class="close" data-dismiss="modal" role="button">&times;</a>
            </div>
            <div class="modal-body">

            </div>
            <div class="modal-footer">
                <button class="btn btn-danger" data-dismiss="modal">Dismiss</button>
            </div>
        </div>
    </div>
</div>

<div id="modal-error-email" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Email already registered</h3>
                <a class="close" data-dismiss="modal" role="button">&times;</a>
            </div>
            <div class="modal-body">

            </div>
            <div class="modal-footer">
                <button class="btn btn-danger" data-dismiss="modal">Dismiss</button>
            </div>
        </div>
    </div>
</div>

<div id="modal-error-rollNo" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Roll No already registered</h3>
                <a class="close" data-dismiss="modal" role="button">&times;</a>
            </div>
            <div class="modal-body">

            </div>
            <div class="modal-footer">
                <button class="btn btn-danger" data-dismiss="modal">Dismiss</button>
            </div>
        </div>
    </div>
</div>

<script>
    $('#UserName').change(function () {
        var value = $('#UserName').val();
        $.ajax({
            url: '/BranchAdmin/IsUsernameAvailable',
            data: {
                'username': $(this).val()
            }
        })
            .done(function (response) {
                if (response == 'true') {

                } else {
                    $('#modal-error-username .modal-body').html('Sorry, the username ' + value + ' is already taken. Please try another one.');
                    $('#modal-error-username').modal('show');
                }
            })
            .error(function () {
                console.log('Error in ajax request for checking username availability');
            });
    });

    $('#Email').change(function () {
        var value = $('#Email').val();
        $.ajax({
            url: '/BranchAdmin/IsEmailAvailable',
            data: {
                'email': $(this).val()
            }
        })
            .done(function (response) {
                if (response == 'true') {

                } else {
                    $('#modal-error-email .modal-body').html('Sorry, the email address ' + value + ' is already registered. Please try another one.');
                    $('#modal-error-email').modal('show');
                }
            })
            .error(function () {
                console.log('Error in ajax request for checking email availability');
            });
    });

    $('#RollNo').change(function () {
        var rollNo = $('#RollNo').val();
        var branchId = $('#BranchId').val();
        $.ajax({
            url: '/BranchAdmin/IsRollNumberAvailableInBranch',
            data: {
                'rollNo': rollNo,
                'branchId': branchId
            }
        })
            .done(function (response) {
                if (response == 'true') {

                } else {
                    $('#modal-error-rollNo .modal-body').html('Sorry, the roll number ' + rollNo + ' is already taken in the selected branch. Please try another roll Number or change the branch.');
                    $('#modal-error-rollNo').modal('show');
                }
            })
            .error(function () {
                console.log('Error in ajax request for checking username availability');
            });
    });

    $('#BranchId').change(function () {
        var rollNo = $('#RollNo').val();
        var branchId = $('#BranchId').val();
        $.ajax({
            url: '/BranchAdmin/IsRollNumberAvailableInBranch',
            data: {
                'rollNo': rollNo,
                'branchId': branchId
            }
        })
            .done(function (response) {
                if (response == 'true') {

                } else {
                    $('#modal-error-rollNo .modal-body').html('Sorry, the roll number ' + rollNo + ' is already taken in the selected branch. Please try another roll Number or change the branch.');
                    $('#modal-error-rollNo').modal('show');
                }
            })
            .error(function () {
                console.log('Error in ajax request for checking username availability');
            });
    });

    $('#BranchId').change(function () {
        $.ajax({
            url: '@Url.Action("GetClassesFromBranchId")',
            data: {
                'id': $(this).val()
            },
            type: 'GET',
            success: function (response) {
                if (response.length === 0) {
                    $('#Class').html('<option>No class available</option>');
                } else {
                    let options = '';
                    for (let c in response) {
                        options += '<option value = ' + response[c]['Id'] + '>' + response[c]['Name'] + '</option>';
                    }
                    $('#Class').html(options);
                }
            },
            error: function (xhr, error) {
                console.log('Error in querying classes for the selected branch.');
            }
        });

        $.ajax({
            url: '@Url.Action("GetSectionsFromBranchClassId")',
            data: {
                'branchId': $(this).val(),
                'classId': $('#Class').val()
            },
            type: 'GET',
            success: function (response) {
                if (response === false || response.length === 0) {
                    $('#Section').html('<option>No section availabe selected branch and class</option>');
                } else {
                    var options = '';
                    for (let section in response) {
                        options += '<option value = ' + response[section]['Id'] + '>' + response[section]['Name'] + '</option>';
                    }
                    $('#Section').html(options);
                }
            },
            error: function (xhr, error) {
                console.log('Error in request for querying section based on branchId and classid.');
            }
        });
    });

    $('#Class').change(function () {
        $.ajax({
            url: '@Url.Action("GetSectionsFromBranchClassId")',
            data: {
                'branchId': $('#BranchId').val(),
                'classId': $(this).val()
            },
            type: 'GET',
            success: function (response) {
                if (response === false || response.length === 0) {
                    $('#Section').html('<option>No section availabe selected branch and class</option>');
                } else {
                    var options = '';
                    for (let section in response) {
                        options += '<option value = ' + response[section]['Id'] + '>' + response[section]['Name'] + '</option>';
                    }
                    $('#Section').html(options);
                }
            },
            error: function (xhr, error) {
                console.log('Error in request for querying section based on branchId and classid.');
            }
        });
    });
</script>